Here is a detailed explanation for Java 8' new interface model & the diamond problem of multiple inheritance.

As you might see in this examples, starting with JDK 8, Java has introduced a kind of multiple inheritance as both, the class and its interface might contain an implementation of the same method (same name & signature). To address the diamond problem there is a precedence in which order an implementation is used: only if the class implements all default / optional methods of its interfaces, the code can be compiled and the implementations of this class are used. Otherwise the compiler tries to patch the missing implementation(s) with interface's default implementation. And if there are multiple default implementations of a method, then the diamond problem occurs and the compiler rejects the compilation. 
Java 8' new interfaces model is the result of approaching backwards compatibility, i. e. to keep existing code that was written against pre Java 8 interfaces compilable.
-------------------------------------

NoClassDefFoundError is a linkage error basically. It occurs when you try and instantiate an object (statically with "new") and class name is there in classpath, but, class definition is not present.

ClassNotFoundException is more general and is a runtime exception when you try to use a class that doesn't exist. For example, you have a parameter in a function accepts an interface and someone passes in a class that implements that interface but you don't have access to the class. It also covers case of dynamic class loading, such as using loadClass() or Class.forName().
---------------------------------------------------------------------------------

why String is immutable in Java ?

in java they will make use of String very extensively, explain ??

to make memory utilization in an efficient way, they had come up with 'STRING POOL' concept, which store String leterals.

to use string pool efficiantly, they make String as immutable.

for example : 

String s1,s,s3,s4,s5 ... all are pointing to "ram" ( only 1 String instance  has been created)

s1 = "sriram";// s1 now pointing to "sriram"
as string is immutable still "ram" exist in String Pool, along with "sriram"

thats where, all other s2,s3,s4,s5 are still pointing same literal "ram".


- java.lang.UnsupportedClassVersionError happens because of a higher JDK during compile time and lower JDK during runtime.

The version number shown describes the version of the JRE the class file is compatible with.

The reported major numbers are:

J2SE 8 = 52,
J2SE 7 = 51,
J2SE 6.0 = 50,
J2SE 5.0 = 49,
JDK 1.4 = 48,
JDK 1.3 = 47,
JDK 1.2 = 46,
JDK 1.1 = 45


To fix the actual problem you should try to either run the Java code with a newer version of Java JRE or specify the target parameter to the Java compiler to instruct the compiler to create code compatible with earlier Java versions.

For example, in order to generate class files compatible with Java 1.4, use the following command line:

javac -target 1.4 HelloWorld.java

https://en.wikipedia.org/wiki/Java_class_file
